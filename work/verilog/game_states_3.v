/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_states_3 (
    input clk,
    input rst,
    output reg [63:0] player_position_out,
    output reg [63:0] tokens,
    output reg [63:0] wall,
    output reg [3:0] player_ones,
    output reg [3:0] player_tens,
    output reg [3:0] hi_score_ones,
    output reg [3:0] hi_score_tens,
    input button_up,
    input button_down,
    input button_left,
    input button_right,
    input soft_reset,
    input hard_reset
  );
  
  
  
  reg [25:0] M_delay_movement_d, M_delay_movement_q = 1'h0;
  
  reg [29:0] M_delay_stage_d, M_delay_stage_q = 1'h0;
  
  reg cmphi_score;
  
  
  localparam START_state = 5'd0;
  localparam WAITLEFT_state = 5'd1;
  localparam WAITDOWN_state = 5'd2;
  localparam WAITUP_state = 5'd3;
  localparam WAITRIGHT_state = 5'd4;
  localparam MOVE8TIMESLEFT_state = 5'd5;
  localparam MOVE8TIMESRIGHT_state = 5'd6;
  localparam MOVE8TIMESUP_state = 5'd7;
  localparam MOVE8TIMESDOWN_state = 5'd8;
  localparam TUTORIALROM_state = 5'd9;
  localparam TUTORIAL_state = 5'd10;
  localparam INTER1_state = 5'd11;
  localparam LEVEL1_state = 5'd12;
  localparam INTER2_state = 5'd13;
  localparam LEVEL2_state = 5'd14;
  localparam INTER3_state = 5'd15;
  localparam LEVEL3_state = 5'd16;
  localparam INTER4_state = 5'd17;
  localparam LEVEL4_state = 5'd18;
  localparam INTER5_state = 5'd19;
  localparam LEVEL5_state = 5'd20;
  localparam INTER6_state = 5'd21;
  localparam LEVEL6_state = 5'd22;
  localparam INTER7_state = 5'd23;
  localparam LEVEL7_state = 5'd24;
  localparam INTER8_state = 5'd25;
  localparam LEVEL8_state = 5'd26;
  localparam END_state = 5'd27;
  
  reg [4:0] M_state_d, M_state_q = START_state;
  
  reg [63:0] M_token_map_d, M_token_map_q = 8'h02;
  reg [63:0] M_player_position_d, M_player_position_q = 8'h80;
  reg [2:0] M_player_reg_selector_d, M_player_reg_selector_q = 1'h0;
  reg [7:0] M_end_position_d, M_end_position_q = 8'h01;
  reg [2:0] M_current_stage_d, M_current_stage_q = 3'h0;
  reg [63:0] M_walls_d, M_walls_q = 8'h01;
  reg [2:0] M_number_times_moved_d, M_number_times_moved_q = 3'h0;
  reg [6:0] M_current_running_score_d, M_current_running_score_q = 7'h00;
  reg [6:0] M_hi_score_d, M_hi_score_q = 7'h00;
  reg [3:0] M_level_score_d, M_level_score_q = 4'h0;
  reg [3:0] M_current_ones_d, M_current_ones_q = 4'h0;
  reg [3:0] M_current_tenths_d, M_current_tenths_q = 4'h0;
  reg [3:0] M_hi_ones_d, M_hi_ones_q = 4'h0;
  reg [3:0] M_hi_tenths_d, M_hi_tenths_q = 4'h0;
  
  reg [63:0] intermediate_tokens;
  
  reg points;
  
  wire [64-1:0] M_inter_one_player_initial_position;
  wire [3-1:0] M_inter_one_player_reg_selector;
  wire [64-1:0] M_inter_one_end_position;
  wire [64-1:0] M_inter_one_walls;
  wire [64-1:0] M_inter_one_tokens;
  reg [2-1:0] M_inter_one_rngeezus;
  level_one_rom_16 inter_one (
    .rngeezus(M_inter_one_rngeezus),
    .player_initial_position(M_inter_one_player_initial_position),
    .player_reg_selector(M_inter_one_player_reg_selector),
    .end_position(M_inter_one_end_position),
    .walls(M_inter_one_walls),
    .tokens(M_inter_one_tokens)
  );
  
  wire [64-1:0] M_inter_two_player_initial_position;
  wire [3-1:0] M_inter_two_player_reg_selector;
  wire [64-1:0] M_inter_two_end_position;
  wire [64-1:0] M_inter_two_walls;
  wire [64-1:0] M_inter_two_tokens;
  reg [2-1:0] M_inter_two_rngeezus;
  level_two_rom_17 inter_two (
    .rngeezus(M_inter_two_rngeezus),
    .player_initial_position(M_inter_two_player_initial_position),
    .player_reg_selector(M_inter_two_player_reg_selector),
    .end_position(M_inter_two_end_position),
    .walls(M_inter_two_walls),
    .tokens(M_inter_two_tokens)
  );
  
  wire [64-1:0] M_inter_three_player_initial_position;
  wire [3-1:0] M_inter_three_player_reg_selector;
  wire [64-1:0] M_inter_three_end_position;
  wire [64-1:0] M_inter_three_walls;
  wire [64-1:0] M_inter_three_tokens;
  reg [2-1:0] M_inter_three_rngeezus;
  level_three_rom_18 inter_three (
    .rngeezus(M_inter_three_rngeezus),
    .player_initial_position(M_inter_three_player_initial_position),
    .player_reg_selector(M_inter_three_player_reg_selector),
    .end_position(M_inter_three_end_position),
    .walls(M_inter_three_walls),
    .tokens(M_inter_three_tokens)
  );
  
  wire [64-1:0] M_inter_four_player_initial_position;
  wire [3-1:0] M_inter_four_player_reg_selector;
  wire [64-1:0] M_inter_four_end_position;
  wire [64-1:0] M_inter_four_walls;
  wire [64-1:0] M_inter_four_tokens;
  reg [2-1:0] M_inter_four_rngeezus;
  level_four_rom_19 inter_four (
    .rngeezus(M_inter_four_rngeezus),
    .player_initial_position(M_inter_four_player_initial_position),
    .player_reg_selector(M_inter_four_player_reg_selector),
    .end_position(M_inter_four_end_position),
    .walls(M_inter_four_walls),
    .tokens(M_inter_four_tokens)
  );
  
  wire [64-1:0] M_inter_five_player_initial_position;
  wire [3-1:0] M_inter_five_player_reg_selector;
  wire [64-1:0] M_inter_five_end_position;
  wire [64-1:0] M_inter_five_walls;
  wire [64-1:0] M_inter_five_tokens;
  reg [2-1:0] M_inter_five_rngeezus;
  level_five_rom_20 inter_five (
    .rngeezus(M_inter_five_rngeezus),
    .player_initial_position(M_inter_five_player_initial_position),
    .player_reg_selector(M_inter_five_player_reg_selector),
    .end_position(M_inter_five_end_position),
    .walls(M_inter_five_walls),
    .tokens(M_inter_five_tokens)
  );
  
  wire [64-1:0] M_inter_six_player_initial_position;
  wire [3-1:0] M_inter_six_player_reg_selector;
  wire [64-1:0] M_inter_six_end_position;
  wire [64-1:0] M_inter_six_walls;
  wire [64-1:0] M_inter_six_tokens;
  reg [2-1:0] M_inter_six_rngeezus;
  level_six_rom_21 inter_six (
    .rngeezus(M_inter_six_rngeezus),
    .player_initial_position(M_inter_six_player_initial_position),
    .player_reg_selector(M_inter_six_player_reg_selector),
    .end_position(M_inter_six_end_position),
    .walls(M_inter_six_walls),
    .tokens(M_inter_six_tokens)
  );
  
  wire [64-1:0] M_inter_seven_player_initial_position;
  wire [3-1:0] M_inter_seven_player_reg_selector;
  wire [64-1:0] M_inter_seven_end_position;
  wire [64-1:0] M_inter_seven_walls;
  wire [64-1:0] M_inter_seven_tokens;
  reg [2-1:0] M_inter_seven_rngeezus;
  level_seven_rom_22 inter_seven (
    .rngeezus(M_inter_seven_rngeezus),
    .player_initial_position(M_inter_seven_player_initial_position),
    .player_reg_selector(M_inter_seven_player_reg_selector),
    .end_position(M_inter_seven_end_position),
    .walls(M_inter_seven_walls),
    .tokens(M_inter_seven_tokens)
  );
  
  wire [64-1:0] M_inter_eight_player_initial_position;
  wire [3-1:0] M_inter_eight_player_reg_selector;
  wire [64-1:0] M_inter_eight_end_position;
  wire [64-1:0] M_inter_eight_walls;
  wire [64-1:0] M_inter_eight_tokens;
  reg [2-1:0] M_inter_eight_rngeezus;
  level_eight_rom_23 inter_eight (
    .rngeezus(M_inter_eight_rngeezus),
    .player_initial_position(M_inter_eight_player_initial_position),
    .player_reg_selector(M_inter_eight_player_reg_selector),
    .end_position(M_inter_eight_end_position),
    .walls(M_inter_eight_walls),
    .tokens(M_inter_eight_tokens)
  );
  
  wire [64-1:0] M_end_smiley;
  wire [64-1:0] M_end_ready;
  end_24 L_end (
    .smiley(M_end_smiley),
    .ready(M_end_ready)
  );
  
  wire [64-1:0] M_move_player_player_location_out;
  wire [3-1:0] M_move_player_new_player_reg_selector;
  wire [64-1:0] M_move_player_new_token_map;
  wire [1-1:0] M_move_player_score_token;
  reg [3-1:0] M_move_player_player_reg_selector;
  reg [64-1:0] M_move_player_player_current_position;
  reg [64-1:0] M_move_player_walls;
  reg [64-1:0] M_move_player_token_map;
  move_player_25 move_player (
    .player_reg_selector(M_move_player_player_reg_selector),
    .player_current_position(M_move_player_player_current_position),
    .walls(M_move_player_walls),
    .token_map(M_move_player_token_map),
    .player_location_out(M_move_player_player_location_out),
    .new_player_reg_selector(M_move_player_new_player_reg_selector),
    .new_token_map(M_move_player_new_token_map),
    .score_token(M_move_player_score_token)
  );
  
  wire [64-1:0] M_move_down_player_location_out;
  wire [3-1:0] M_move_down_new_player_reg_selector;
  wire [64-1:0] M_move_down_new_token_map;
  wire [1-1:0] M_move_down_score_token;
  reg [3-1:0] M_move_down_player_reg_selector;
  reg [64-1:0] M_move_down_player_current_position;
  reg [64-1:0] M_move_down_walls;
  reg [64-1:0] M_move_down_token_map;
  move_player_down_26 move_down (
    .player_reg_selector(M_move_down_player_reg_selector),
    .player_current_position(M_move_down_player_current_position),
    .walls(M_move_down_walls),
    .token_map(M_move_down_token_map),
    .player_location_out(M_move_down_player_location_out),
    .new_player_reg_selector(M_move_down_new_player_reg_selector),
    .new_token_map(M_move_down_new_token_map),
    .score_token(M_move_down_score_token)
  );
  
  wire [64-1:0] M_move_left_player_location_out;
  wire [3-1:0] M_move_left_new_player_reg_selector;
  wire [64-1:0] M_move_left_new_token_map;
  wire [1-1:0] M_move_left_score_token;
  reg [3-1:0] M_move_left_player_reg_selector;
  reg [64-1:0] M_move_left_player_current_position;
  reg [64-1:0] M_move_left_walls;
  reg [64-1:0] M_move_left_token_map;
  move_player_left_27 move_left (
    .player_reg_selector(M_move_left_player_reg_selector),
    .player_current_position(M_move_left_player_current_position),
    .walls(M_move_left_walls),
    .token_map(M_move_left_token_map),
    .player_location_out(M_move_left_player_location_out),
    .new_player_reg_selector(M_move_left_new_player_reg_selector),
    .new_token_map(M_move_left_new_token_map),
    .score_token(M_move_left_score_token)
  );
  
  wire [64-1:0] M_move_right_player_location_out;
  wire [3-1:0] M_move_right_new_player_reg_selector;
  wire [64-1:0] M_move_right_new_token_map;
  wire [1-1:0] M_move_right_score_token;
  reg [3-1:0] M_move_right_player_reg_selector;
  reg [64-1:0] M_move_right_player_current_position;
  reg [64-1:0] M_move_right_walls;
  reg [64-1:0] M_move_right_token_map;
  move_player_right_28 move_right (
    .player_reg_selector(M_move_right_player_reg_selector),
    .player_current_position(M_move_right_player_current_position),
    .walls(M_move_right_walls),
    .token_map(M_move_right_token_map),
    .player_location_out(M_move_right_player_location_out),
    .new_player_reg_selector(M_move_right_new_player_reg_selector),
    .new_token_map(M_move_right_new_token_map),
    .score_token(M_move_right_score_token)
  );
  
  wire [64-1:0] M_tutorial_player_initial_position;
  wire [3-1:0] M_tutorial_player_reg_selector;
  wire [64-1:0] M_tutorial_end_position;
  wire [64-1:0] M_tutorial_walls;
  wire [64-1:0] M_tutorial_tokens;
  tutorial_rom_29 tutorial (
    .player_initial_position(M_tutorial_player_initial_position),
    .player_reg_selector(M_tutorial_player_reg_selector),
    .end_position(M_tutorial_end_position),
    .walls(M_tutorial_walls),
    .tokens(M_tutorial_tokens)
  );
  
  wire [1-1:0] M_compare_high_score_high_score_lower;
  reg [7-1:0] M_compare_high_score_player_current_score;
  reg [7-1:0] M_compare_high_score_high_score;
  compare_high_score_30 compare_high_score (
    .player_current_score(M_compare_high_score_player_current_score),
    .high_score(M_compare_high_score_high_score),
    .high_score_lower(M_compare_high_score_high_score_lower)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_player_position_d = M_player_position_q;
    M_current_stage_d = M_current_stage_q;
    M_level_score_d = M_level_score_q;
    M_current_running_score_d = M_current_running_score_q;
    M_hi_tenths_d = M_hi_tenths_q;
    M_token_map_d = M_token_map_q;
    M_hi_ones_d = M_hi_ones_q;
    M_walls_d = M_walls_q;
    M_current_ones_d = M_current_ones_q;
    M_delay_stage_d = M_delay_stage_q;
    M_delay_movement_d = M_delay_movement_q;
    M_hi_score_d = M_hi_score_q;
    M_end_position_d = M_end_position_q;
    M_number_times_moved_d = M_number_times_moved_q;
    M_current_tenths_d = M_current_tenths_q;
    M_player_reg_selector_d = M_player_reg_selector_q;
    
    player_position_out = M_player_position_q;
    tokens = M_token_map_q;
    wall = M_walls_q;
    player_ones = M_current_ones_q;
    player_tens = M_current_tenths_q;
    hi_score_ones = M_hi_ones_q;
    hi_score_tens = M_hi_tenths_q;
    M_move_player_player_reg_selector = 3'bxxx;
    M_move_player_player_current_position = 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    M_move_player_walls = 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    M_move_player_token_map = 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    M_move_down_player_reg_selector = 3'bxxx;
    M_move_down_player_current_position = 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    M_move_down_walls = 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    M_move_down_token_map = 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    M_move_left_player_reg_selector = 3'bxxx;
    M_move_left_player_current_position = 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    M_move_left_walls = 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    M_move_left_token_map = 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    M_move_right_player_reg_selector = 3'bxxx;
    M_move_right_player_current_position = 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    M_move_right_walls = 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    M_move_right_token_map = 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    M_inter_one_rngeezus = M_delay_movement_q[0+1-:2];
    M_inter_two_rngeezus = M_delay_movement_q[0+1-:2];
    M_inter_three_rngeezus = M_delay_movement_q[0+1-:2];
    M_inter_four_rngeezus = M_delay_movement_q[0+1-:2];
    M_inter_five_rngeezus = M_delay_movement_q[0+1-:2];
    M_inter_six_rngeezus = M_delay_movement_q[0+1-:2];
    M_inter_seven_rngeezus = M_delay_movement_q[0+1-:2];
    M_inter_eight_rngeezus = M_delay_movement_q[0+1-:2];
    M_compare_high_score_high_score = M_hi_score_q;
    M_compare_high_score_player_current_score = M_current_running_score_q;
    M_current_ones_d = M_current_ones_q;
    M_current_tenths_d = M_current_tenths_q;
    M_hi_ones_d = M_hi_ones_q;
    M_hi_tenths_d = M_hi_tenths_q;
    M_player_position_d = M_player_position_q;
    M_player_reg_selector_d = M_player_reg_selector_q;
    M_token_map_d = M_token_map_q;
    M_end_position_d = M_end_position_q;
    M_current_stage_d = M_current_stage_q;
    M_walls_d = M_walls_q;
    M_number_times_moved_d = M_number_times_moved_q;
    M_delay_movement_d = M_delay_movement_q + 1'h1;
    M_current_running_score_d = M_current_running_score_q;
    M_level_score_d = M_level_score_q;
    M_hi_score_d = M_hi_score_q;
    M_delay_stage_d = M_delay_stage_q + 1'h1;
    if (M_current_ones_q == 4'ha) begin
      M_current_ones_d = 1'h0;
      M_current_tenths_d = M_current_tenths_q + 1'h1;
    end
    
    case (M_state_q)
      START_state: begin
        M_player_position_d = M_end_ready;
        player_position_out = M_player_position_q;
        M_current_ones_d = 4'h0;
        M_current_tenths_d = 4'h0;
        M_walls_d = 64'h0000000000000000;
        M_token_map_d = 64'h0000000000000000;
        M_current_running_score_d = 7'h00;
        if (button_up | button_down | button_left | button_right) begin
          M_state_d = TUTORIALROM_state;
        end
      end
      TUTORIALROM_state: begin
        M_player_position_d = M_tutorial_player_initial_position;
        M_player_reg_selector_d = M_tutorial_player_reg_selector;
        player_position_out = M_player_position_q;
        intermediate_tokens = M_tutorial_tokens;
        M_token_map_d = intermediate_tokens;
        M_walls_d = M_tutorial_walls;
        M_level_score_d = 1'h0;
        M_state_d = TUTORIAL_state;
      end
      TUTORIAL_state: begin
        M_walls_d = M_tutorial_walls;
        M_current_stage_d = 3'h0;
        if (button_up) begin
          M_state_d = WAITUP_state;
        end
        if (button_down) begin
          M_state_d = WAITDOWN_state;
        end
        if (button_left) begin
          M_state_d = WAITLEFT_state;
        end
        if (button_right) begin
          M_state_d = WAITRIGHT_state;
        end
        if (soft_reset) begin
          M_state_d = TUTORIALROM_state;
        end
        if (hard_reset) begin
          M_state_d = START_state;
        end
        if (M_player_position_q[56+7-:8] == 8'h01) begin
          M_state_d = INTER1_state;
        end
      end
      MOVE8TIMESUP_state: begin
        M_move_player_player_current_position = M_player_position_q;
        M_move_player_player_reg_selector = M_player_reg_selector_q;
        M_move_player_walls = M_walls_q;
        M_move_player_token_map = M_token_map_q;
        M_token_map_d = M_move_player_new_token_map;
        points = M_move_player_score_token;
        if (points == 1'h1) begin
          M_level_score_d = M_level_score_q + 1'h1;
          M_current_ones_d = M_current_ones_q + 1'h1;
          M_current_running_score_d = M_current_running_score_q + 1'h1;
        end
        M_player_reg_selector_d = M_move_player_new_player_reg_selector;
        M_player_position_d = M_move_player_player_location_out;
        M_state_d = WAITUP_state;
      end
      WAITUP_state: begin
        if (M_delay_movement_q[21+0-:1] == 1'h1) begin
          M_delay_movement_d = 1'h0;
          if (M_number_times_moved_q == 3'h7) begin
            M_number_times_moved_d = 1'h0;
            
            case (M_current_stage_q)
              3'h0: begin
                M_state_d = TUTORIAL_state;
              end
              3'h1: begin
                M_state_d = LEVEL1_state;
              end
              3'h2: begin
                M_state_d = LEVEL2_state;
              end
              3'h3: begin
                M_state_d = LEVEL3_state;
              end
              3'h4: begin
                M_state_d = LEVEL4_state;
              end
              3'h5: begin
                M_state_d = LEVEL5_state;
              end
              3'h6: begin
                M_state_d = LEVEL6_state;
              end
              3'h7: begin
                M_state_d = LEVEL7_state;
              end
            endcase
          end else begin
            M_number_times_moved_d = M_number_times_moved_q + 1'h1;
            M_state_d = MOVE8TIMESUP_state;
          end
        end
      end
      MOVE8TIMESDOWN_state: begin
        M_move_down_player_current_position = M_player_position_q;
        M_move_down_player_reg_selector = M_player_reg_selector_q;
        M_move_down_walls = M_walls_q;
        M_move_down_token_map = M_token_map_q;
        M_token_map_d = M_move_down_new_token_map;
        points = M_move_down_score_token;
        if (points == 1'h1) begin
          M_level_score_d = M_level_score_q + 1'h1;
          M_current_ones_d = M_current_ones_q + 1'h1;
          M_current_running_score_d = M_current_running_score_q + 1'h1;
        end
        M_player_reg_selector_d = M_move_down_new_player_reg_selector;
        M_player_position_d = M_move_down_player_location_out;
        M_state_d = WAITDOWN_state;
      end
      WAITDOWN_state: begin
        if (M_delay_movement_q[21+0-:1] == 1'h1) begin
          M_delay_movement_d = 1'h0;
          if (M_number_times_moved_q == 3'h7) begin
            M_number_times_moved_d = 1'h0;
            
            case (M_current_stage_q)
              3'h0: begin
                M_state_d = TUTORIAL_state;
              end
              3'h1: begin
                M_state_d = LEVEL1_state;
              end
              3'h2: begin
                M_state_d = LEVEL2_state;
              end
              3'h3: begin
                M_state_d = LEVEL3_state;
              end
              3'h4: begin
                M_state_d = LEVEL4_state;
              end
              3'h5: begin
                M_state_d = LEVEL5_state;
              end
              3'h6: begin
                M_state_d = LEVEL6_state;
              end
              3'h7: begin
                M_state_d = LEVEL7_state;
              end
            endcase
          end else begin
            M_number_times_moved_d = M_number_times_moved_q + 1'h1;
            M_state_d = MOVE8TIMESDOWN_state;
          end
        end
      end
      MOVE8TIMESLEFT_state: begin
        M_move_left_player_current_position = M_player_position_q;
        M_move_left_player_reg_selector = M_player_reg_selector_q;
        M_move_left_walls = M_walls_q;
        M_move_left_token_map = M_token_map_q;
        M_token_map_d = M_move_left_new_token_map;
        points = M_move_left_score_token;
        if (points == 1'h1) begin
          M_level_score_d = M_level_score_q + 1'h1;
          M_current_ones_d = M_current_ones_q + 1'h1;
          M_current_running_score_d = M_current_running_score_q + 1'h1;
        end
        M_player_reg_selector_d = M_move_left_new_player_reg_selector;
        M_player_position_d = M_move_left_player_location_out;
        M_state_d = WAITLEFT_state;
      end
      WAITLEFT_state: begin
        if (M_delay_movement_q[21+0-:1] == 1'h1) begin
          M_delay_movement_d = 1'h0;
          if (M_number_times_moved_q == 3'h7) begin
            M_number_times_moved_d = 1'h0;
            
            case (M_current_stage_q)
              3'h0: begin
                M_state_d = TUTORIAL_state;
              end
              3'h1: begin
                M_state_d = LEVEL1_state;
              end
              3'h2: begin
                M_state_d = LEVEL2_state;
              end
              3'h3: begin
                M_state_d = LEVEL3_state;
              end
              3'h4: begin
                M_state_d = LEVEL4_state;
              end
              3'h5: begin
                M_state_d = LEVEL5_state;
              end
              3'h6: begin
                M_state_d = LEVEL6_state;
              end
              3'h7: begin
                M_state_d = LEVEL7_state;
              end
            endcase
          end else begin
            M_number_times_moved_d = M_number_times_moved_q + 1'h1;
            M_state_d = MOVE8TIMESLEFT_state;
          end
        end
      end
      MOVE8TIMESRIGHT_state: begin
        M_move_right_player_current_position = M_player_position_q;
        M_move_right_player_reg_selector = M_player_reg_selector_q;
        M_move_right_walls = M_walls_q;
        M_move_right_token_map = M_token_map_q;
        M_token_map_d = M_move_right_new_token_map;
        points = M_move_right_score_token;
        if (points == 1'h1) begin
          M_level_score_d = M_level_score_q + 1'h1;
          M_current_ones_d = M_current_ones_q + 1'h1;
          M_current_running_score_d = M_current_running_score_q + 1'h1;
        end
        M_player_reg_selector_d = M_move_right_new_player_reg_selector;
        M_player_position_d = M_move_right_player_location_out;
        M_state_d = WAITRIGHT_state;
      end
      WAITRIGHT_state: begin
        if (M_delay_movement_q[21+0-:1] == 1'h1) begin
          M_delay_movement_d = 1'h0;
          if (M_number_times_moved_q == 3'h7) begin
            M_number_times_moved_d = 1'h0;
            
            case (M_current_stage_q)
              3'h0: begin
                M_state_d = TUTORIAL_state;
              end
              3'h1: begin
                M_state_d = LEVEL1_state;
              end
              3'h2: begin
                M_state_d = LEVEL2_state;
              end
              3'h3: begin
                M_state_d = LEVEL3_state;
              end
              3'h4: begin
                M_state_d = LEVEL4_state;
              end
              3'h5: begin
                M_state_d = LEVEL5_state;
              end
              3'h6: begin
                M_state_d = LEVEL6_state;
              end
              3'h7: begin
                M_state_d = LEVEL7_state;
              end
            endcase
          end else begin
            M_number_times_moved_d = M_number_times_moved_q + 1'h1;
            M_state_d = MOVE8TIMESRIGHT_state;
          end
        end
      end
      INTER1_state: begin
        M_player_position_d = M_inter_one_player_initial_position;
        M_player_reg_selector_d = M_inter_one_player_reg_selector;
        player_position_out = M_player_position_q;
        M_inter_one_rngeezus = M_delay_movement_q[0+1-:2];
        intermediate_tokens = M_inter_one_tokens;
        M_token_map_d = intermediate_tokens;
        M_walls_d = M_inter_one_walls;
        M_level_score_d = 1'h0;
        M_state_d = LEVEL1_state;
      end
      LEVEL1_state: begin
        M_walls_d = M_inter_one_walls;
        M_current_stage_d = 3'h1;
        if (button_up) begin
          M_state_d = WAITUP_state;
        end
        if (button_down) begin
          M_state_d = WAITDOWN_state;
        end
        if (button_left) begin
          M_state_d = WAITLEFT_state;
        end
        if (button_right) begin
          M_state_d = WAITRIGHT_state;
        end
        if (soft_reset) begin
          M_level_score_d = 1'h0;
          M_state_d = INTER1_state;
        end
        if (hard_reset) begin
          M_current_running_score_d = 7'h00;
          M_current_ones_d = 4'h0;
          M_current_tenths_d = 4'h0;
          M_state_d = START_state;
        end
        if (M_player_position_q[56+7-:8] == 8'h01) begin
          M_state_d = INTER2_state;
        end
      end
      INTER2_state: begin
        M_player_position_d = M_inter_two_player_initial_position;
        M_player_reg_selector_d = M_inter_two_player_reg_selector;
        player_position_out = M_player_position_q;
        M_inter_two_rngeezus = M_delay_movement_q[0+1-:2];
        intermediate_tokens = M_inter_two_tokens;
        M_level_score_d = 1'h0;
        M_token_map_d = intermediate_tokens;
        M_walls_d = M_inter_two_walls;
        M_state_d = LEVEL2_state;
      end
      LEVEL2_state: begin
        M_walls_d = M_inter_two_walls;
        M_current_stage_d = 3'h2;
        if (button_up) begin
          M_state_d = WAITUP_state;
        end
        if (button_down) begin
          M_state_d = WAITDOWN_state;
        end
        if (button_left) begin
          M_state_d = WAITLEFT_state;
        end
        if (button_right) begin
          M_state_d = WAITRIGHT_state;
        end
        if (soft_reset) begin
          M_level_score_d = 1'h0;
          M_state_d = INTER2_state;
        end
        if (hard_reset) begin
          M_current_running_score_d = 7'h00;
          M_current_ones_d = 4'h0;
          M_current_tenths_d = 4'h0;
          M_state_d = START_state;
        end
        if (M_player_position_q[56+7-:8] == 8'h01) begin
          M_state_d = INTER3_state;
        end
      end
      INTER3_state: begin
        M_player_position_d = M_inter_three_player_initial_position;
        M_player_reg_selector_d = M_inter_three_player_reg_selector;
        player_position_out = M_player_position_q;
        M_inter_three_rngeezus = M_delay_movement_q[0+1-:2];
        intermediate_tokens = M_inter_three_tokens;
        M_token_map_d = intermediate_tokens;
        M_level_score_d = 1'h0;
        M_walls_d = M_inter_three_walls;
        M_state_d = LEVEL3_state;
      end
      LEVEL3_state: begin
        M_walls_d = M_inter_three_walls;
        M_current_stage_d = 3'h3;
        if (button_up) begin
          M_state_d = WAITUP_state;
        end
        if (button_down) begin
          M_state_d = WAITDOWN_state;
        end
        if (button_left) begin
          M_state_d = WAITLEFT_state;
        end
        if (button_right) begin
          M_state_d = WAITRIGHT_state;
        end
        if (soft_reset) begin
          M_level_score_d = 1'h0;
          M_state_d = INTER3_state;
        end
        if (hard_reset) begin
          M_current_running_score_d = 7'h00;
          M_current_ones_d = 4'h0;
          M_current_tenths_d = 4'h0;
          M_state_d = START_state;
        end
        if (M_player_position_q[56+7-:8] == 8'h01) begin
          M_state_d = INTER4_state;
        end
      end
      INTER4_state: begin
        M_player_position_d = M_inter_four_player_initial_position;
        M_player_reg_selector_d = M_inter_four_player_reg_selector;
        player_position_out = M_player_position_q;
        M_inter_four_rngeezus = M_delay_movement_q[0+1-:2];
        intermediate_tokens = M_inter_four_tokens;
        M_level_score_d = 1'h0;
        M_token_map_d = intermediate_tokens;
        M_walls_d = M_inter_four_walls;
        M_state_d = LEVEL4_state;
      end
      LEVEL4_state: begin
        M_walls_d = M_inter_four_walls;
        M_current_stage_d = 3'h4;
        if (button_up) begin
          M_state_d = WAITUP_state;
        end
        if (button_down) begin
          M_state_d = WAITDOWN_state;
        end
        if (button_left) begin
          M_state_d = WAITLEFT_state;
        end
        if (button_right) begin
          M_state_d = WAITRIGHT_state;
        end
        if (soft_reset) begin
          M_level_score_d = 1'h0;
          M_state_d = INTER4_state;
        end
        if (hard_reset) begin
          M_current_running_score_d = 7'h00;
          M_current_ones_d = 4'h0;
          M_current_tenths_d = 4'h0;
          M_state_d = START_state;
        end
        if (M_player_position_q[56+7-:8] == 8'h01) begin
          M_state_d = INTER5_state;
        end
      end
      INTER5_state: begin
        M_player_position_d = M_inter_five_player_initial_position;
        M_player_reg_selector_d = M_inter_five_player_reg_selector;
        player_position_out = M_player_position_q;
        M_inter_five_rngeezus = M_delay_movement_q[0+1-:2];
        intermediate_tokens = M_inter_five_tokens;
        M_level_score_d = 1'h0;
        M_token_map_d = intermediate_tokens;
        M_walls_d = M_inter_five_walls;
        M_state_d = LEVEL5_state;
      end
      LEVEL5_state: begin
        M_walls_d = M_inter_five_walls;
        M_current_stage_d = 3'h5;
        if (button_up) begin
          M_state_d = WAITUP_state;
        end
        if (button_down) begin
          M_state_d = WAITDOWN_state;
        end
        if (button_left) begin
          M_state_d = WAITLEFT_state;
        end
        if (button_right) begin
          M_state_d = WAITRIGHT_state;
        end
        if (soft_reset) begin
          M_level_score_d = 1'h0;
          M_state_d = INTER5_state;
        end
        if (hard_reset) begin
          M_current_running_score_d = 7'h00;
          M_current_ones_d = 4'h0;
          M_current_tenths_d = 4'h0;
          M_state_d = START_state;
        end
        if (M_player_position_q[56+7-:8] == 8'h01) begin
          M_state_d = INTER6_state;
        end
      end
      INTER6_state: begin
        M_player_position_d = M_inter_six_player_initial_position;
        M_player_reg_selector_d = M_inter_six_player_reg_selector;
        player_position_out = M_player_position_q;
        M_inter_six_rngeezus = M_delay_movement_q[0+1-:2];
        intermediate_tokens = M_inter_six_tokens;
        M_level_score_d = 1'h0;
        M_token_map_d = intermediate_tokens;
        M_walls_d = M_inter_six_walls;
        M_state_d = LEVEL6_state;
      end
      LEVEL6_state: begin
        M_walls_d = M_inter_six_walls;
        M_current_stage_d = 3'h6;
        if (button_up) begin
          M_state_d = WAITUP_state;
        end
        if (button_down) begin
          M_state_d = WAITDOWN_state;
        end
        if (button_left) begin
          M_state_d = WAITLEFT_state;
        end
        if (button_right) begin
          M_state_d = WAITRIGHT_state;
        end
        if (soft_reset) begin
          M_level_score_d = 1'h0;
          M_state_d = INTER6_state;
        end
        if (hard_reset) begin
          M_current_running_score_d = 7'h00;
          M_current_ones_d = 4'h0;
          M_current_tenths_d = 4'h0;
          M_state_d = START_state;
        end
        if (M_player_position_q[56+7-:8] == 8'h01) begin
          M_state_d = INTER7_state;
        end
      end
      INTER7_state: begin
        M_player_position_d = M_inter_seven_player_initial_position;
        M_player_reg_selector_d = M_inter_seven_player_reg_selector;
        player_position_out = M_player_position_q;
        M_inter_seven_rngeezus = M_delay_movement_q[0+1-:2];
        intermediate_tokens = M_inter_seven_tokens;
        M_level_score_d = 1'h0;
        M_token_map_d = intermediate_tokens;
        M_walls_d = M_inter_seven_walls;
        M_state_d = LEVEL7_state;
      end
      LEVEL7_state: begin
        M_walls_d = M_inter_seven_walls;
        M_current_stage_d = 3'h7;
        if (button_up) begin
          M_state_d = WAITUP_state;
        end
        if (button_down) begin
          M_state_d = WAITDOWN_state;
        end
        if (button_left) begin
          M_state_d = WAITLEFT_state;
        end
        if (button_right) begin
          M_state_d = WAITRIGHT_state;
        end
        if (soft_reset) begin
          M_level_score_d = 1'h0;
          M_state_d = INTER7_state;
        end
        if (hard_reset) begin
          M_current_running_score_d = 7'h00;
          M_current_ones_d = 4'h0;
          M_current_tenths_d = 4'h0;
          M_state_d = START_state;
        end
        if (M_player_position_q[56+7-:8] == 8'h01) begin
          M_delay_stage_d = 1'h0;
          M_state_d = END_state;
        end
      end
      INTER8_state: begin
        M_player_position_d = M_inter_eight_player_initial_position;
        M_player_reg_selector_d = M_inter_eight_player_reg_selector;
        player_position_out = M_player_position_q;
        M_inter_eight_rngeezus = M_delay_movement_q[0+1-:2];
        intermediate_tokens = M_inter_eight_tokens;
        M_level_score_d = 1'h0;
        M_token_map_d = intermediate_tokens;
        M_walls_d = M_inter_eight_walls;
        M_state_d = LEVEL8_state;
      end
      LEVEL8_state: begin
        M_walls_d = M_inter_eight_walls;
        M_current_stage_d = 3'h4;
        if (button_up) begin
          M_state_d = WAITUP_state;
        end
        if (button_down) begin
          M_state_d = WAITDOWN_state;
        end
        if (button_left) begin
          M_state_d = WAITLEFT_state;
        end
        if (button_right) begin
          M_state_d = WAITRIGHT_state;
        end
        if (M_player_position_q[56+7-:8] == 8'h01) begin
          M_state_d = END_state;
        end
      end
      END_state: begin
        M_walls_d = 64'h0000000000000000;
        M_token_map_d = 64'h0000000000000000;
        M_player_position_d = M_end_smiley;
        player_position_out = M_player_position_q;
        M_compare_high_score_high_score = M_hi_score_q;
        M_compare_high_score_player_current_score = M_current_running_score_q;
        cmphi_score = M_compare_high_score_high_score_lower;
        if (cmphi_score != 1'h1) begin
          M_hi_score_d = M_current_running_score_q;
          M_hi_ones_d = M_current_ones_q;
          M_hi_tenths_d = M_current_tenths_q;
        end
        M_hi_ones_d = M_current_ones_q;
        M_hi_tenths_d = M_current_tenths_q;
        if (M_delay_stage_q[27+0-:1] == 1'h1) begin
          M_state_d = START_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_delay_stage_q <= 1'h0;
    end else begin
      M_delay_stage_q <= M_delay_stage_d;
    end
  end
  
  
  always @(posedge clk) begin
    M_state_q <= M_state_d;
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_token_map_q <= 8'h02;
      M_player_position_q <= 8'h80;
      M_player_reg_selector_q <= 1'h0;
      M_end_position_q <= 8'h01;
      M_current_stage_q <= 3'h0;
      M_walls_q <= 8'h01;
      M_number_times_moved_q <= 3'h0;
      M_current_running_score_q <= 7'h00;
      M_hi_score_q <= 7'h00;
      M_level_score_q <= 4'h0;
      M_current_ones_q <= 4'h0;
      M_current_tenths_q <= 4'h0;
      M_hi_ones_q <= 4'h0;
      M_hi_tenths_q <= 4'h0;
    end else begin
      M_token_map_q <= M_token_map_d;
      M_player_position_q <= M_player_position_d;
      M_player_reg_selector_q <= M_player_reg_selector_d;
      M_end_position_q <= M_end_position_d;
      M_current_stage_q <= M_current_stage_d;
      M_walls_q <= M_walls_d;
      M_number_times_moved_q <= M_number_times_moved_d;
      M_current_running_score_q <= M_current_running_score_d;
      M_hi_score_q <= M_hi_score_d;
      M_level_score_q <= M_level_score_d;
      M_current_ones_q <= M_current_ones_d;
      M_current_tenths_q <= M_current_tenths_d;
      M_hi_ones_q <= M_hi_ones_d;
      M_hi_tenths_q <= M_hi_tenths_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_delay_movement_q <= 1'h0;
    end else begin
      M_delay_movement_q <= M_delay_movement_d;
    end
  end
  
endmodule
