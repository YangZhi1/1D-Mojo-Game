module move_player (
    input player_reg_selector[3],
    input player_current_position [8][8],
    input walls [8][8],
    input token_map [8][8],
    output player_location_out [8][8],
    output new_player_reg_selector[3],
    output new_token_map [8][8],
    output score_token
  ) {
  
  wall_collide up_wall;
  token_collide token_collide;
  
  /*
  FILE TO DO SHIFTING FOR BUTTON_UP IS PRESSED
  */
  always {
    new_player_reg_selector = player_reg_selector;
    player_location_out = 8x{{8h00}};
    
    up_wall.player_current_position = player_current_position[0];
    up_wall.walls = walls[0];
    
    token_collide.token_map = token_map[0];
    token_collide.player_next_position = player_current_position[0];
    
    new_token_map = token_map;
    score_token = 0;
    
    /*
    1. BOUNDARY COLLISION IS WHEN WE'RE AT ROW 0 (CAUSE ROW 0 CANNOT MOVE UP ANYMORE), SO WE DON'T MOVE 
    2. CHECK FOR COLLISION AGAINST WALL 
    3. CHECK FOR COLLISION AGAINST TOKEN 
       3a. IF THERE IS, score_token+1 (UPDATES SCORE WITH SCORE+1, DONE IN game_states)
    
    After calculations are made, we return to game_states file
    */
    case(player_reg_selector){
      b000:
        // do nothing for row 0
        player_location_out[0] = player_current_position[0];
        new_player_reg_selector = 3b000;
      b001:
        // CHECK FOR WALL COLLISION FIRST
        up_wall.player_current_position = player_current_position[1];
        up_wall.walls = walls[0];
        
        // IF THERE'S A COLLISION, WE STAY AT THE SAME POSITION
        if(up_wall.collide){
          player_location_out[1] = player_current_position[1];
          new_player_reg_selector = 3b001;
        }
          
        // OTHERWISE, WE CHECK FOR TOKEN COLLISION AND UPDATE PLAYER'S POSITION 
        else{
          token_collide.token_map = token_map[0];
          token_collide.player_next_position = player_current_position[1];
          new_token_map[0] = token_collide.new_token_map;
          score_token = token_collide.score_token;
          
          player_location_out[0] = player_current_position[1];
          new_player_reg_selector = 3b000;
        }

      b010:
        up_wall.player_current_position = player_current_position[2];
        up_wall.walls = walls[1];
        
        if(up_wall.collide){
          player_location_out[2] = player_current_position[2];
          new_player_reg_selector = 3b010;
        }
        else{
          token_collide.token_map = token_map[1];
          token_collide.player_next_position = player_current_position[2];
          new_token_map[1] = token_collide.new_token_map;
          score_token = token_collide.score_token;
          
          player_location_out[1] = player_current_position[2];
          new_player_reg_selector = 3b001;
        }
      b011:
        up_wall.player_current_position = player_current_position[3];
        up_wall.walls = walls[2];
        
        if(up_wall.collide){
          player_location_out[3] = player_current_position[3];
          new_player_reg_selector = 3b011;
        }
        else{
          token_collide.token_map = token_map[2];
          token_collide.player_next_position = player_current_position[3];
          new_token_map[2] = token_collide.new_token_map;
          score_token = token_collide.score_token;
          
          player_location_out[2] = player_current_position[3];
          new_player_reg_selector = 3b010;
        }
        
      b100:
        up_wall.player_current_position = player_current_position[4];
        up_wall.walls = walls[3];
        
        if(up_wall.collide){
          player_location_out[4] = player_current_position[4];
          new_player_reg_selector = 3b100;
        }
        else{
          token_collide.token_map = token_map[3];
          token_collide.player_next_position = player_current_position[4];
          new_token_map[3] = token_collide.new_token_map;
          score_token = token_collide.score_token;
          
          player_location_out[3] = player_current_position[4];
          new_player_reg_selector = 3b011;
        }
       
      b101:
        up_wall.player_current_position = player_current_position[5];
        up_wall.walls = walls[4];
        
        if(up_wall.collide){
          player_location_out[5] = player_current_position[5];
          new_player_reg_selector = 3b101;
        }
        else{
          token_collide.token_map = token_map[4];
          token_collide.player_next_position = player_current_position[5];
          new_token_map[4] = token_collide.new_token_map;
          score_token = token_collide.score_token;
          
          player_location_out[4] = player_current_position[5];
          new_player_reg_selector = 3b100;
        }
       
      b110:
        up_wall.player_current_position = player_current_position[6];
        up_wall.walls = walls[5];
        
        if(up_wall.collide){
          player_location_out[6] = player_current_position[6];
          new_player_reg_selector = 3b110;
        }
        else{
          token_collide.token_map = token_map[5];
          token_collide.player_next_position = player_current_position[6];
          new_token_map[5] = token_collide.new_token_map;
          score_token = token_collide.score_token;
          
          player_location_out[5] = player_current_position[6];
          new_player_reg_selector = 3b101;
        }
      b111:
        up_wall.player_current_position = player_current_position[7];
        up_wall.walls = walls[6];
        
        if(up_wall.collide){
          player_location_out[7] = player_current_position[7];
          new_player_reg_selector = 3b111;
        }
        else{
          token_collide.token_map = token_map[6];
          token_collide.player_next_position = player_current_position[7];
          new_token_map[6] = token_collide.new_token_map;
          score_token = token_collide.score_token;
          
          player_location_out[6] = player_current_position[7];
          new_player_reg_selector = 3b110;
        }
    }
    
  }
}