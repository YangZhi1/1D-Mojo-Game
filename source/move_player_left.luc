module move_player_left (
    input player_reg_selector[3],
    input player_current_position [8][8],
    input walls [8][8],
    input token_map [8][8],
    output player_location_out [8][8],
    output new_player_reg_selector[3],
    output new_token_map [8][8],
    output score_token
  ) {
  sig new_player_position [8];
  alu alu;
  wall_collide left_wall;
  token_collide token_collide;
  
  /*
  1. CHECK IF PLAYER HAS COLLIDED WITH BOUNDARY (MOVED OUT OF BOUNDS)
  2. CHECK IF PLAYER HAS COLLIDED WITH WALL 
  3. CHECK IF PLAYER HAS COLLIDED WITH TOKEN
     3a. IF PLAYER COLLIDES WITH TOKEN, score_token+1
  4. RETURN TO game_states
     
  Makes use of a register, player_reg_selector, to determine which row the player is at
     
  NOTE: ONLY DIFFERENCE BETWEEN THIS FILE AND move_player_right IS THE ALUFN 
  */
  always {
    score_token = 0;
    new_token_map = token_map;
    
    
    alu.a = 0;
    new_player_reg_selector = player_reg_selector;
    player_location_out = 8x{{8h00}};
    
    left_wall.walls = walls[0];
    left_wall.player_current_position = player_current_position[0];
    
    token_collide.player_next_position = player_current_position[0];
    token_collide.token_map = token_map[0];

    /*
    CODE TO MOVE LEFT 
    USE ALU FUNCTION SHIFT LEFT TO GET NEW POSITION OF PLAYER 
    USE NEW POSITION OF PLAYER TO CHECK FOR WALL AND TOKEN COLLISION 
    */
    alu.alufn = 6b100000;
    alu.b = 16b1;
    case(player_reg_selector){
      b000:
        alu.a = player_current_position[0];
        new_player_position = alu.aluOut[7:0];
        left_wall.player_current_position = new_player_position;
        left_wall.walls = walls[0];
        
        if(left_wall.collide){
          player_location_out[0] = player_current_position[0];
        }
        else{
          if(new_player_position == 8b0){
            player_location_out = player_current_position;
          }
          else{                                                          // IF PLAYER CAN MOVE
            token_collide.player_next_position = new_player_position;
            token_collide.token_map = token_map[0];
            new_token_map[0] = token_collide.new_token_map;
            score_token = token_collide.score_token;
            
            player_location_out[0] = new_player_position;
          }
        }
        
      b001:
        alu.a = player_current_position[1];
        new_player_position = alu.aluOut[7:0];
        left_wall.player_current_position = new_player_position;
        left_wall.walls = walls[1];
        
        if(left_wall.collide){
          player_location_out[1] = player_current_position[1];
        }
        else{
          if(new_player_position == 8b0){
            player_location_out = player_current_position;
          }
          else{
            token_collide.player_next_position = new_player_position;
            token_collide.token_map = token_map[1];
            new_token_map[1] = token_collide.new_token_map;
            score_token = token_collide.score_token;
            
            player_location_out[1] = new_player_position;
          }
        }
       
      b010:
        alu.a = player_current_position[2];
        new_player_position = alu.aluOut[7:0];
        left_wall.player_current_position = new_player_position;
        left_wall.walls = walls[2];
        if(left_wall.collide){
          player_location_out[2] = player_current_position[2];
        }
        else{
          if(new_player_position == 8b0){
            player_location_out = player_current_position;
          }
          else{
            token_collide.player_next_position = new_player_position;
            token_collide.token_map = token_map[2];
            new_token_map[2] = token_collide.new_token_map;
            score_token = token_collide.score_token;
            
            player_location_out[2] = new_player_position;
          }
        }
        
      b011:
        alu.a = player_current_position[3];
        new_player_position = alu.aluOut[7:0];
        left_wall.player_current_position = new_player_position;
        left_wall.walls = walls[3];
        if(left_wall.collide){
          player_location_out[3] = player_current_position[3];
        }
        else{
          if(new_player_position == 8b0){
            player_location_out = player_current_position;
          }
          else{
            token_collide.player_next_position = new_player_position;
            token_collide.token_map = token_map[3];
            new_token_map[3] = token_collide.new_token_map;
            score_token = token_collide.score_token;
            
            player_location_out[3] = new_player_position;
          }
        }
       
      b100:
        alu.a = player_current_position[4];
        new_player_position = alu.aluOut[7:0];
        left_wall.player_current_position = new_player_position;
        left_wall.walls = walls[4];
        if(left_wall.collide){
          player_location_out[4] = player_current_position[4];
        }
        else{
          if(new_player_position == 8b0){
            player_location_out = player_current_position;
          }
          else{
            token_collide.player_next_position = new_player_position;
            token_collide.token_map = token_map[4];
            new_token_map[4] = token_collide.new_token_map;
            score_token = token_collide.score_token;
            
            player_location_out[4] = new_player_position;
          }
        }
      
      b101:
        alu.a = player_current_position[5];
        new_player_position = alu.aluOut[7:0];
        left_wall.player_current_position = new_player_position;
        left_wall.walls = walls[5];
        if(left_wall.collide){
          player_location_out[5] = player_current_position[5];
        }
        else{
          if(new_player_position == 8b0){
            player_location_out = player_current_position;
          }
          else{
            token_collide.player_next_position = new_player_position;
            token_collide.token_map = token_map[5];
            new_token_map[5] = token_collide.new_token_map;
            score_token = token_collide.score_token;
            
            player_location_out[5] = new_player_position;
          }
        }
       
      b110:
        alu.a = player_current_position[6];
        new_player_position = alu.aluOut[7:0];
        left_wall.player_current_position = new_player_position;
        left_wall.walls = walls[6];
        if(left_wall.collide){
          player_location_out[6] = player_current_position[6];
        }
        else{
          if(new_player_position == 8b0){
            player_location_out = player_current_position;
          }
          else{
            token_collide.player_next_position = new_player_position;
            token_collide.token_map = token_map[6];
            new_token_map[6] = token_collide.new_token_map;
            score_token = token_collide.score_token;
            
            player_location_out[6] = new_player_position;
          }
        }
      
      b111:
        alu.a = player_current_position[7];
        new_player_position = alu.aluOut[7:0];
        left_wall.player_current_position = new_player_position;
        left_wall.walls = walls[7];
        if(left_wall.collide){
          player_location_out[7] = player_current_position[7];
        }
        else{
          if(new_player_position == 8b0){
            player_location_out = player_current_position;
          }
          else{
            token_collide.player_next_position = new_player_position;
            token_collide.token_map = token_map[7];
            new_token_map[7] = token_collide.new_token_map;
            score_token = token_collide.score_token;
            
            player_location_out[7] = new_player_position;
          }
        }
    }
  }
}
