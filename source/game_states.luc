module game_states (
    input clk,  // clock
    input rst,  // reset
    output player_position_out [8][8],
    output tokens [8][8],
    output current_score [7],
    output wall [8][8],
    input button_up,
    input button_down,
    input button_left,
    input button_right
  ) {
  dff delay_movement[26](.clk(clk), .rst(rst));
  
  fsm state(.clk(clk), #INIT(START)) = {START, WAITLEFT, WAITDOWN, WAITUP, WAITRIGHT, MOVE8TIMESLEFT, MOVE8TIMESRIGHT, MOVE8TIMESUP, MOVE8TIMESDOWN, TUTORIALROM, TUTORIAL, INTER1, LEVEL1, INTER2, LEVEL2, INTER3, LEVEL3, INTER4, LEVEL4};
  .clk(clk){
    .rst(rst){
      dff token_map [8][8](#INIT(8b00000010));
      dff player_position [8][8](#INIT(8b10000000));   // Initialize player position to start at top left corner
      dff player_reg_selector [3];
      dff score [7](#INIT(7b0000000));                 // Since 99 (max we can display) requires 7 bits to encode
      dff level_score [4](#INIT(4b0000));              // Level score will not exceed 10
      dff end_position [8](#INIT(8b00000001));
      dff current_stage[3](#INIT(3b000));
      dff walls [8][8](#INIT(8b00000001));
      
      dff number_times_moved[3](#INIT(3b000));
      
    }
  }
  
  sig intermediate_tokens [8][8];
  
  // MODULES
  level_one_rom inter_one;
  level_two_rom inter_two;
  level_three_rom inter_three;
  level_four_rom inter_four;
  
  move_player move_player;
  move_player_down move_down;
  move_player_left move_left;
  move_player_right move_right;
  tutorial_rom tutorial;
    

  always {
    player_position_out = player_position.q;
    tokens = token_map.q;
    current_score = score.q; 
    wall = walls.q;
    
    /*
    INSTANTIATE VARIABLES FOR OTHER FILES
    */
    move_player.player_reg_selector = 3bxxx;
    move_player.player_current_position = 8x{{8hxx}};
    move_player.walls = 8x{{8hxx}};
    move_player.token_map = 8x{{8hxx}};

    move_down.player_reg_selector = 3bxxx;
    move_down.player_current_position = 8x{{8hxx}};
    move_down.walls = 8x{{8hxx}};
    move_down.token_map = 8x{{8hxx}};

    move_left.player_reg_selector = 3bxxx;
    move_left.player_current_position = 8x{{8hxx}};
    move_left.walls = 8x{{8hxx}};
    move_left.token_map = 8x{{8hxx}};

    move_right.player_reg_selector = 3bxxx;
    move_right.player_current_position = 8x{{8hxx}};
    move_right.walls = 8x{{8hxx}};
    move_right.token_map = 8x{{8hxx}};

    inter_one.rngeezus = delay_movement.q[1:0];
    inter_two.rngeezus = delay_movement.q[1:0];
    inter_three.rngeezus = delay_movement.q[1:0];
    inter_four.rngeezus = delay_movement.q[1:0];
    
    /*
    MAKE dff RETAIN PREVIOUS VALUES
    */
    player_position.d = player_position.q;
    player_reg_selector.d = player_reg_selector.q;
    token_map.d = token_map.q;
    score.d = score.q;
    end_position.d = end_position.q;
    current_stage.d = current_stage.q;
    walls.d = walls.q;
    level_score.d = level_score.q;
    number_times_moved.d = number_times_moved.q;
    delay_movement.d = delay_movement.q + 1;

    case(state.q){
      state.START:
        // TODO: CHANGE THIS CODE TO START STATE 
        // ON START BUTTON: GO TO LEVEL 1, RESET PREVIOUS PLAYER SCORE TO 0
        // DISPLAY HIGH SCORE, DISPLAY PREVIOUS SCORE OF THE PREVIOUS PLAYER
        player_position.d = tutorial.player_initial_position;
        player_reg_selector.d = tutorial.player_reg_selector;
        player_position_out = player_position.q;
        score.d = 7b0000000;
        state.d = state.TUTORIALROM;
      
      state.TUTORIALROM:
        player_position.d = tutorial.player_initial_position;
        player_reg_selector.d = tutorial.player_reg_selector;
        player_position_out = player_position.q;
        intermediate_tokens = tutorial.tokens;
        token_map.d = intermediate_tokens;
        walls.d = tutorial.walls;
        state.d = state.TUTORIAL;
        
      state.TUTORIAL:
        walls.d = tutorial.walls;
        current_stage.d = 3b000;
        if(button_up){
          state.d = state.WAITUP;
        }
        if(button_down){
          state.d = state.WAITDOWN;
        }
        if(button_left){
          state.d = state.WAITLEFT;
        }
        if(button_right){
          state.d = state.WAITRIGHT;
        }
        if(player_position.q[7] == 8b00000001){
          state.d = state.INTER1;
        }
        
        // TODO: ADD IN CONDITION TO MOVE TO NEXT LEVEL
        
      /*
      Give it values, retrieve return values, MOVE8TIMES states for all 4 directions
      are all very similar, just that they take different values
      */
      state.MOVE8TIMESUP:
        move_player.player_current_position = player_position.q;          // output current position into move_player (this is move_up) file
        move_player.player_reg_selector = player_reg_selector.q;          // output register selector to move_player file
        move_player.walls = walls.q;                                      // output walls to move_player
        move_player.token_map = token_map.q;                              // outputs token map to move_player file
        
        token_map.d = move_player.new_token_map;                          // retrieves new token map, in case there was a collision with a token
        if(move_player.score_token){                                      // if there was a collision with token, score+1
          level_score.d = level_score.q + 1;
        }
        player_reg_selector.d = move_player.new_player_reg_selector;       // retrieve new register selector from move_player file
        player_position.d = move_player.player_location_out;               // retrieve new player position from move_player file
        state.d = state.WAITUP;
      
      /*
      This state works hand in hand with MOVE8TIMESUP to create an effect (illusion)
      that the player is "sliding" around without control of where to stop
      ALMOST IDENTICAL TO OTHER WAIT__ STATES, BUT NEEDED DUE TO DIFFERENCE IN DIRECTIONS AND FUNCTIONS USED
      */ 
      state.WAITUP:
        if(delay_movement.q[22] == 1){                 // Gives it around 0.085 seconds delay, which will not exceed 0.8 seconds
          delay_movement.d = 0;
          if(number_times_moved.q == 3b111){           // IF WE HAVE MOVED 8 TIMES, WE RESET BACK TO THE STAGE WE CAME FROM
            number_times_moved.d = 0;                  // Use a register to store the number of times moved                                  
            case(current_stage.q){                     // Case to move back to the levels that we came from
              3b000:
                state.d = state.TUTORIAL;
              3b001:
                state.d = state.LEVEL1;
              3b010:
                state.d = state.LEVEL2;
              3b011:
                state.d = state.LEVEL3;
              3b100:
                state.d = state.LEVEL4;
            }
          }
          else{
            number_times_moved.d = number_times_moved.q + 1;
            state.d = state.MOVE8TIMESUP;
          }
        }
        
      
      state.MOVE8TIMESDOWN:
        move_down.player_current_position = player_position.q;          
        move_down.player_reg_selector = player_reg_selector.q; 
        move_down.walls = walls.q; 
        move_down.token_map = token_map.q;
        
        token_map.d = move_down.new_token_map;
        if(move_down.score_token){
          level_score.d = level_score.q + 1;
        }
        player_reg_selector.d = move_down.new_player_reg_selector;
        player_position.d = move_down.player_location_out;
        state.d = state.WAITDOWN;
        
      state.WAITDOWN:
        if(delay_movement.q[22] == 1){
          delay_movement.d = 0;
          if(number_times_moved.q == 3b111){
            // IF WE HAVE MOVED 8 TIMES, WE RESET BACK TO THE STAGE WE CAME FROM
            number_times_moved.d = 0;
            case(current_stage.q){
              3b000:
                state.d = state.TUTORIAL;
              3b001:
                state.d = state.LEVEL1;
              3b010:
                state.d = state.LEVEL2;
              3b011:
                state.d = state.LEVEL3;
              3b100:
                state.d = state.LEVEL4;
            }
          }
          else{
            number_times_moved.d = number_times_moved.q + 1;
            state.d = state.MOVE8TIMESDOWN;
          }
        }
      
      state.MOVE8TIMESLEFT:
        move_left.player_current_position = player_position.q;
        move_left.player_reg_selector = player_reg_selector.q;
        move_left.walls = walls.q;
        move_left.token_map = token_map.q;
        
        token_map.d = move_left.new_token_map;
        if(move_left.score_token){
          level_score.d = level_score.q + 1;
        }
        player_reg_selector.d = move_left.new_player_reg_selector;
        player_position.d = move_left.player_location_out;
        state.d = state.WAITLEFT;
          
      state.WAITLEFT:
        if(delay_movement.q[22] == 1){
          delay_movement.d = 0;
          if(number_times_moved.q == 3b111){
            // IF WE HAVE MOVED 8 TIMES, WE RESET BACK TO THE STAGE WE CAME FROM
            number_times_moved.d = 0;
            case(current_stage.q){
              3b000:
                state.d = state.TUTORIAL;
              3b001:
                state.d = state.LEVEL1;
              3b010:
                state.d = state.LEVEL2;
              3b011:
                state.d = state.LEVEL3;
              3b100:
                state.d = state.LEVEL4;
            }
          }
          else{
            number_times_moved.d = number_times_moved.q + 1;
            state.d = state.MOVE8TIMESLEFT;
          }
        }
      state.MOVE8TIMESRIGHT:
        move_right.player_current_position = player_position.q;          
        move_right.player_reg_selector = player_reg_selector.q;  
        move_right.walls = walls.q;
        move_right.token_map = token_map.q;
        
        token_map.d = move_right.new_token_map;
        if(move_right.score_token){
          level_score.d = level_score.q + 1;
        }
        player_reg_selector.d = move_right.new_player_reg_selector;   
        player_position.d = move_right.player_location_out;
        state.d = state.WAITRIGHT;
        
      state.WAITRIGHT:
        if(delay_movement.q[22] == 1){
          delay_movement.d = 0;
          if(number_times_moved.q == 3b111){
            // IF WE HAVE MOVED 8 TIMES, WE RESET BACK TO THE STAGE WE CAME FROM
            number_times_moved.d = 0;
            case(current_stage.q){
              3b000:
                state.d = state.TUTORIAL;
              3b001:
                state.d = state.LEVEL1;
              3b010:
                state.d = state.LEVEL2;
              3b011:
                state.d = state.LEVEL3;
              3b100:
                state.d = state.LEVEL4;
            }
          }
          else{
            number_times_moved.d = number_times_moved.q + 1;
            state.d = state.MOVE8TIMESRIGHT;
          }
        }
        
      state.INTER1:
        player_position.d = inter_one.player_initial_position;
        player_reg_selector.d = inter_one.player_reg_selector;
        player_position_out = player_position.q;
        inter_one.rngeezus = delay_movement.q[1:0];
        intermediate_tokens = inter_one.tokens;
        token_map.d = intermediate_tokens;
        walls.d = inter_one.walls;
        state.d = state.LEVEL1;
        
      state.LEVEL1:
        walls.d = inter_one.walls;
        current_stage.d = 3b001;
        if(button_up){
          state.d = state.WAITUP;
        }
        if(button_down){
          state.d = state.WAITDOWN;
        }
        if(button_left){
          state.d = state.WAITLEFT;
        }
        if(button_right){
          state.d = state.WAITRIGHT;
        }
        if(player_position.q[7] == 8b00000001){
          state.d = state.INTER2;
        }
      state.INTER2:
        player_position.d = inter_two.player_initial_position;
        player_reg_selector.d = inter_two.player_reg_selector;
        player_position_out = player_position.q;
        
        inter_two.rngeezus = delay_movement.q[1:0];
        intermediate_tokens = inter_two.tokens;
        token_map.d = intermediate_tokens;
        walls.d = inter_two.walls;
        state.d = state.LEVEL2;
        
      state.LEVEL2:
        walls.d = inter_two.walls;
        current_stage.d = 3b010;
        if(button_up){
          state.d = state.WAITUP;
        }
        if(button_down){
          state.d = state.WAITDOWN;
        }
        if(button_left){
          state.d = state.WAITLEFT;
        }
        if(button_right){
          state.d = state.WAITRIGHT;
        }
        if(player_position.q[7] == 8b00000001){
          state.d = state.INTER3;
        }
      state.INTER3:
        player_position.d = inter_three.player_initial_position;
        player_reg_selector.d = inter_three.player_reg_selector;
        player_position_out = player_position.q;
        inter_three.rngeezus = delay_movement.q[1:0];
        
        intermediate_tokens = inter_three.tokens;
        token_map.d = intermediate_tokens;
        walls.d = inter_three.walls;
        state.d = state.LEVEL3;
        
      state.LEVEL3:
        walls.d = inter_three.walls;
        current_stage.d = 3b011;
        if(button_up){
          state.d = state.WAITUP;
        }
        if(button_down){
          state.d = state.WAITDOWN;
        }
        if(button_left){
          state.d = state.WAITLEFT;
        }
        if(button_right){
          state.d = state.WAITRIGHT;
        }
        if(player_position.q[7] == 8b00000001){
          state.d = state.INTER4;
        }
      state.INTER4:
        player_position.d = inter_four.player_initial_position;
        player_reg_selector.d = inter_four.player_reg_selector;
        player_position_out = player_position.q;
        
        inter_four.rngeezus = delay_movement.q[1:0];
        intermediate_tokens = inter_four.tokens;
        token_map.d = intermediate_tokens;
        walls.d = inter_four.walls;
        state.d = state.LEVEL4;
        
      state.LEVEL4:
        walls.d = inter_four.walls;
        current_stage.d = 3b100;
        if(button_up){
          state.d = state.WAITUP;
        }
        if(button_down){
          state.d = state.WAITDOWN;
        }
        if(button_left){
          state.d = state.WAITLEFT;
        }
        if(button_right){
          state.d = state.WAITRIGHT;
        }
        if(player_position.q[7] == 8b00000001){
          state.d = state.START;
        }
    }
  }
}
