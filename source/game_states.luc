module game_states (
    input clk,  // clock
    input rst,  // reset
    output player_position_out [8][8],
    input button_up,
    input button_down,
    input button_left,
    input button_right
  ) {
  
  fsm state(.clk(clk), #INIT(START)) = {START, MOVE};
  
  dff player_position [8][8](.clk(clk), .rst(rst), #INIT(8b10000000));
  dff player_reg_selector [3](.clk(clk), .rst(rst));
  
  sig next_position [8][8];
  
  // MODULES
  level_one_rom inter_one;
  move_player move_player;

  always {
    player_position_out = 8x{{8b0}};
    
    /*
    INSTANTIATE VARIABLES FOR OTHER FILES
    */
    move_player.button_down = 0;
    move_player.button_left = 0;
    move_player.button_right = 0;
    move_player.button_up = 0;
    move_player.player_reg_selector = 3bxxx;
    move_player.player_current_position = 8x{{8hxx}};
    
    next_position = 8x{{8hxx}};
    
    /*
    MAKE dff RETAIN PREVIOUS VALUES
    */
    player_position.d = player_position.q;
    player_reg_selector.d = player_reg_selector.q;
    

    case(state.q){ 
      state.START:
        player_position.d = inter_one.player_initial_position;
        player_reg_selector.d = inter_one.player_reg_selector;
        player_position_out = player_position.q;
        state.d = state.MOVE;
      
      state.MOVE:
        if(button_up){
          move_player.button_up = 1;                                   // set button up for move_player file
          move_player.player_current_position = player_position.q;     // output current position into move_player file
          move_player.player_reg_selector = player_reg_selector.q;     // output register selector to move_player file
          player_reg_selector.d = move_player.new_player_reg_selector;      // retrieve new register selector from move_player file
          next_position = move_player.player_location_out;             // retrieve new player position from move_player file
        }
        if(button_down){
          move_player.button_down = 1;
          move_player.player_reg_selector = player_reg_selector.q;
          move_player.player_current_position = player_position.q;
          player_reg_selector.d = move_player.new_player_reg_selector;
          next_position = move_player.player_location_out;
        }
        if(button_left){
          move_player.button_left = 1;
          move_player.player_current_position = player_position.q;
          move_player.player_reg_selector = player_reg_selector.q;
          player_reg_selector.d = move_player.new_player_reg_selector;
          next_position = move_player.player_location_out;
        }
        if(button_right){
          move_player.button_right = 1;
          move_player.player_current_position = player_position.q;
          move_player.player_reg_selector = player_reg_selector.q;
          player_reg_selector.d = move_player.new_player_reg_selector;
          next_position = move_player.player_location_out;
        }
        player_position.d = next_position;
        player_position_out = next_position;
        
    }
  }
}
