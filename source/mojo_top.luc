module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output red[8],
    output green[8],
    output blue[8],
    output row[8],
    input buttons[4],
    input resetbtn[2],
    output playerones[8],
    output playertens[8],
    output highones[8],
    output hightens[8]
  ) {
  
  sig rst;                  // reset signal
  display_seven_seg display_seven_seg;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    game_states game(.rst(rst));
    fsm state(.rst(rst)) = {A, A2, A3, B, B2, B3, C, C2, C3, D, D2, D3, E, E2, E3, F, F2, F3, G, G2, G3, H, H2, H3};
    
  }
  /*
  DEBOUNCER LOGIC
  */
  edge_detector up(.clk(clk), #RISE(1), #FALL(0));
  edge_detector down(.clk(clk), #RISE(1), #FALL(0));
  edge_detector left(.clk(clk), #RISE(1), #FALL(0));
  edge_detector right(.clk(clk), #RISE(1), #FALL(0));
  edge_detector resetleft(.clk(clk), #RISE(1), #FALL(0));
  edge_detector resetright(.clk(clk), #RISE(1), #FALL(0));
  button_conditioner upb(.clk(clk));
  button_conditioner downb(.clk(clk));
  button_conditioner leftb(.clk(clk));
  button_conditioner rightb(.clk(clk));
  button_conditioner resetleftb(.clk(clk));
  button_conditioner resetrightb(.clk(clk));
  
  dff counter[20](.clk(clk), .rst(rst));
  
  
  always {  
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    game.button_up = 0;
    game.button_down = 0;
    game.button_left = 0;
    game.button_right = 0;
    game.soft_reset = 0;
    game.hard_reset = 0;
    
    /*
    BUTTON CONDITIONER INPUTS
    */
    upb.in = buttons[0];
    downb.in = buttons[1];
    leftb.in = buttons[2];
    rightb.in = buttons[3];
    
    resetleftb.in = resetbtn[0];
    resetrightb.in = resetbtn[1];
    
    /*
    EDGE DETECTOR INPUTS
    */
    up.in = ~upb.out;
    down.in = ~downb.out;
    left.in = ~leftb.out;
    right.in = ~rightb.out;
    
    resetleft.in = ~resetleftb.out;
    resetright.in = ~resetrightb.out;
    
    
    /*
    SEND INVERSE OF BUTTON PRESS INPUTS TO GAME FILE
    */
    game.button_up = up.out;
    game.button_down = down.out;
    game.button_left = left.out;
    game.button_right = right.out;
    game.soft_reset = resetleft.out;
    game.hard_reset = resetright.out;
    
    row = 8x{0};
    green = 8x{1};
    blue = 8x{1};
    red = 8x{1};
    
    playerones = 8x{0};
    playertens = 8x{0};
    highones = 8x{0};
    hightens = 8x{0};
    
    display_seven_seg.to_display = 4b0;
    
    counter.d = counter.q + 1;
    
    case(state.q){
      state.A:
        row[0] = 1;
        red = 8x{1};
        blue = 8x{1};
        green = ~game.player_position_out[0];
        
        display_seven_seg.to_display = game.player_ones;
        playerones = display_seven_seg.to_seven_seg;
        
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.A2;
        }
      state.A2:
        row[0] = 1;
        red = 8x{1};
        green = 8x{1};
        blue = ~game.tokens[0];
        
        display_seven_seg.to_display = game.player_tens;
        playertens = display_seven_seg.to_seven_seg;

        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.A3;
        }
      state.A3:
        row[0] = 1;
        red = ~game.wall[0];
        green = 8x{1};
        blue = 8x{1};

        display_seven_seg.to_display = game.hi_score_ones;
        highones = display_seven_seg.to_seven_seg;
        
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.B;
        }
        
      state.B:
        row[1] = 1;
        red = 8x{1};
        blue = 8x{1};
        green = ~game.player_position_out[1];
        
        display_seven_seg.to_display = game.hi_score_tens;
        hightens = display_seven_seg.to_seven_seg;
        
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.B2;
        }
      state.B2:
        row[1] = 1;
        red = 8x{1};
        green = 8x{1};
        blue = ~game.tokens[1];
        
        display_seven_seg.to_display = game.player_ones;
        playerones = display_seven_seg.to_seven_seg;
        
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.B3;
        }
      state.B3:
        row[1] = 1;
        red = ~game.wall[1];
        green = 8x{1};
        blue = 8x{1};
        
        display_seven_seg.to_display = game.hi_score_tens;
        hightens = display_seven_seg.to_seven_seg;
        
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.C;
        }
      state.C:
        row[2] = 1;
        red = 8x{1};
        blue = 8x{1};
        green = ~game.player_position_out[2];
        
        display_seven_seg.to_display = game.hi_score_ones;
        highones = display_seven_seg.to_seven_seg;
        
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.C2;
        }
      state.C2:
        row[2] = 1;
        red = 8x{1};
        green = 8x{1};
        blue = ~game.tokens[2];
       
        display_seven_seg.to_display = game.player_tens;
        playertens = display_seven_seg.to_seven_seg;
        
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.C3;
        }
      state.C3:
        row[2] = 1;
        red = ~game.wall[2];
        green = 8x{1};
        blue = 8x{1};
        
        display_seven_seg.to_display = game.player_ones;
        playerones = display_seven_seg.to_seven_seg;
        
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.D;
        }
       
      state.D:
        row[3] = 1;
        red = 8x{1};
        blue = 8x{1};
        green = ~game.player_position_out[3];
        
        display_seven_seg.to_display = game.hi_score_tens;
        hightens = display_seven_seg.to_seven_seg;
        
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.D2;
        }
      state.D2:
        row[3] = 1;
        red = 8x{1};
        green = 8x{1};
        blue = ~game.tokens[3];
        
        display_seven_seg.to_display = game.hi_score_ones;
        highones = display_seven_seg.to_seven_seg;
        
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.D3;
        }
      state.D3:
        row[3] = 1;
        red = ~game.wall[3];
        green = 8x{1};
        blue = 8x{1};
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.E;
        }
      state.E:
        row[4] = 1;
        red = 8x{1};
        blue = 8x{1};
        green = ~game.player_position_out[4];
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.E2;
        }
      state.E2:
        row[4] = 1;
        red = 8x{1};
        green = 8x{1};
        blue = ~game.tokens[4];
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.E3;
        }
      state.E3:
        row[4] = 1;
        red = ~game.wall[4];
        green = 8x{1};
        blue = 8x{1};
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.F;
        }
      state.F:
        row[5] = 1;
        red = 8x{1};
        blue = 8x{1};
        green = ~game.player_position_out[5];
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.F2;
        }
      state.F2:
        row[5] = 1;
        red = 8x{1};
        green = 8x{1};
        blue = ~game.tokens[5];
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.F3;
        }
      state.F3:
        row[5] = 1;
        red = ~game.wall[5];
        green = 8x{1};
        blue = 8x{1};
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.G;
        }
        
      state.G:
        row[6] = 1;
        red = 8x{1};
        blue = 8x{1};
        green = ~game.player_position_out[6];
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.G2;
        }
      state.G2:
        row[6] = 1;
        red = 8x{1};
        green = 8x{1};
        blue = ~game.tokens[6];
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.G3;
        }
      state.G3:
        row[6] = 1;
        red = ~game.wall[6];
        green = 8x{1};
        blue = 8x{1};
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.H;
        }
        
      state.H:
        row[7] = 1;
        red = 8x{1};
        blue = 8x{1};
        green[7:1] = ~game.player_position_out[7][7:1];
        green[0] = 0;
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.H2;
        }
      state.H2:
        row[7] = 1;
        red = 8x{1};
        green = 8x{1};
        blue = ~game.tokens[7];
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.H3;
        }
      state.H3:
        row[7] = 1;
        red = ~game.wall[7];
        green = 8x{1};
        blue = 8x{1};
        if(counter.q[3] == 1){
          counter.d = 0;
          state.d = state.A;
        }
    }
  }
}