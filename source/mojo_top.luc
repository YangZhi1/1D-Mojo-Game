module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output green[8],
    output row[8],
    input buttons[4],
    input io_dip [3][8],    // remove once done!
    input io_button [5],
    output io_led [3][8] 
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    game_states game(.rst(rst));
    fsm state(.rst(rst)) = {A, B, C, D, E, F, G, H};
    
  }
  /*
  DEBOUNCER LOGIC
  */
  edge_detector up(.clk(clk), #RISE(1), #FALL(0));
  edge_detector down(.clk(clk), #RISE(1), #FALL(0));
  edge_detector left(.clk(clk), #RISE(1), #FALL(0));
  edge_detector right(.clk(clk), #RISE(1), #FALL(0));
  button_conditioner upb(.clk(clk));
  button_conditioner downb(.clk(clk));
  button_conditioner leftb(.clk(clk));
  button_conditioner rightb(.clk(clk));
  
  dff counter[20](.clk(clk), .rst(rst));
  always {  
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    game.button_up = 0;
    game.button_down = 0;
    game.button_left = 0;
    game.button_right = 0;
    
    /*
    BUTTON CONDITIONER INPUTS
    */
    upb.in = io_button[0];
    downb.in = io_button[2];
    leftb.in = io_button[3];
    rightb.in = io_button[4];
    
    /*
    EDGE DETECTOR INPUTS
    */
    up.in = upb.out;
    down.in = downb.out;
    left.in = leftb.out;
    right.in = rightb.out;
    
    
    /*
    SEND BUTTON PRESS INPUTS TO GAME FILE
    */
    game.button_up = up.out;
    game.button_down = down.out;
    game.button_left = left.out;
    game.button_right = right.out;
    
    // REMOVE THESE ONCE YOU'RE DONE!
    io_led = 3x{{8b00}};
    // REMOVE THIS
    
    row = 8x{0};
    green = 8x{0};
    
    counter.d = counter.q + 1;
    
    // REMOVE THESE ALSO
    io_led[0] = game.player_position_out[0];
    io_led[1] = game.player_position_out[1];
    io_led[2] = game.player_position_out[2];  
    // REMOVE THIS PART
    
//    game.button_up = buttons[0];
//    game.button_down = buttons[1];
//    game.button_left = buttons[2];
//    game.button_right = buttons[3];
    
    case(state.q){
      state.A:
        counter.d = 0;
        row[0] = 1;
        green = ~game.player_position_out[0];
        if(counter.q[10] == 1){
          state.d = state.B;
        }
      state.B:
        counter.d = 0;
        row[1] = 1;
        green = ~game.player_position_out[0];
        if(counter.q[10] == 1){
          state.d = state.C;
        }
      state.C:
        counter.d = 0;
        row[2] = 1;
        green = ~game.player_position_out[0];
        if(counter.q[10] == 1){
          state.d = state.D;
        }
      state.D:
        counter.d = 0;
        row[3] = 1;
        green = ~game.player_position_out[3];
        if(counter.q[10] == 1){
          state.d = state.E;
        }
      state.E:
        counter.d = 0;
        row[4] = 1;
        green = ~game.player_position_out[4];
        state.d = state.F;
      state.F:
        counter.d = 0;
        row[5] = 1;
        green = game.player_position_out[5];
        if(counter.q[10] == 1){
          state.d = state.G;
        }
      state.G:
        counter.d = 0;
        row[6] = 1;
        green = ~game.player_position_out[6];
        if(counter.q[10] == 1){
          state.d = state.H;
        }
      state.H:
        counter.d = 0;
        row[7] = 1;
        green = ~game.player_position_out[7];
        if(counter.q[10] == 1){
          state.d = state.A;
        }
       
    }
  }
}